service: my-ds-store-app-back-products
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-1
  profile: sandx
  environment:
    PRODUCT_TABLE_NAME: products
    STOCK_TABLE_NAME: stocks
    SNS_REF:
      Ref: createProductTopic
    SQS_URL:
      Ref: productsSQSQueue
  httpApi:
    cors: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.PRODUCT_TABLE_NAME}"
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.STOCK_TABLE_NAME}"
        - Effect: Allow
          Action:
            - sqs:*
          Resource:
            Fn::GetAtt: [productsSQSQueue, Arn]
        - Effect: Allow
          Action: sns:*
          Resource: "*"

functions:
  getProductById:
    handler: src/functions/getProductById.getProductById
    events:
      - httpApi:
          path: /products/{productId}
          method: get
  getProducts:
    handler: src/functions/getProducts.getProducts
    events:
      - httpApi:
          path: /products
          method: get
  createProduct:
    handler: src/functions/createProduct.createProduct
    events:
      - httpApi:
          path: /products
          method: post
  createStub:
    handler: src/functions/createStub.createStub
    events:
      - httpApi:
          path: /create-stub
          method: put
  catalogBatchProcess:
    handler: src/functions/catalogBatchProcess.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn:
            Fn::GetAtt: [productsSQSQueue, Arn]

resources:
  Resources:
    productsSQSQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: productsSQSQueue
    createProductTopic:
      Type: 'AWS::SNS::Topic'
      Properties:
        TopicName: createProductTopic
    createProductTopicSubscriber:
      Type: 'AWS::SNS::Subscription'
      Properties:
        TopicArn:
          Ref: createProductTopic
        Endpoint: daniil_tarantsei@epam.com
        Protocol: email
    createProductTopicFailedSubscriber:
      Type: 'AWS::SNS::Subscription'
      Properties:
        TopicArn:
          Ref: createProductTopic
        Endpoint: danlife100@gmail.com
        Protocol: email
        FilterPolicyScope: MessageBody
        FilterPolicy:
          status: [ "Failed" ]
    productDBDynamo:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.PRODUCT_TABLE_NAME}
    stockDBDynamo:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: product_id
            AttributeType: S
        KeySchema:
          - AttributeName: product_id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.STOCK_TABLE_NAME}
  Outputs:
    productsSQSQueueSharedURL:
      Value: { Ref: productsSQSQueue }
      Export:
        Name: productsSQSQueueSharedURL

plugins:
  - serverless-esbuild
